package com.teeoda.memorytraining.global.GreenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.teeoda.memorytraining.global.GreenDAO.TrainingHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAINING_HISTORY".
*/
public class TrainingHistoryDao extends AbstractDao<TrainingHistory, Long> {

    public static final String TABLENAME = "TRAINING_HISTORY";

    /**
     * Properties of entity TrainingHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Total = new Property(2, Integer.class, "total", false, "TOTAL");
        public final static Property CorrectNum = new Property(3, Integer.class, "correctNum", false, "CORRECT_NUM");
        public final static Property TimeSpent = new Property(4, Integer.class, "timeSpent", false, "TIME_SPENT");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property IsBest = new Property(6, Boolean.class, "isBest", false, "IS_BEST");
    };


    public TrainingHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public TrainingHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAINING_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TOTAL\" INTEGER," + // 2: total
                "\"CORRECT_NUM\" INTEGER," + // 3: correctNum
                "\"TIME_SPENT\" INTEGER," + // 4: timeSpent
                "\"DATE\" INTEGER," + // 5: date
                "\"IS_BEST\" INTEGER);"); // 6: isBest
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAINING_HISTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrainingHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        Integer total = entity.getTotal();
        if (total != null) {
            stmt.bindLong(3, total);
        }
 
        Integer correctNum = entity.getCorrectNum();
        if (correctNum != null) {
            stmt.bindLong(4, correctNum);
        }
 
        Integer timeSpent = entity.getTimeSpent();
        if (timeSpent != null) {
            stmt.bindLong(5, timeSpent);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        Boolean isBest = entity.getIsBest();
        if (isBest != null) {
            stmt.bindLong(7, isBest ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrainingHistory readEntity(Cursor cursor, int offset) {
        TrainingHistory entity = new TrainingHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // total
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // correctNum
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // timeSpent
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isBest
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrainingHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotal(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCorrectNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimeSpent(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIsBest(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrainingHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrainingHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
